package ${package}.api.controller;

import java.util.Arrays;

import org.springframework.web.bind.annotation.*;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

import ${package}.api.model.ext.${className}Ext;

import ${package}.api.model.request.Query${className}Request;

import ${package}.api.service.${className}Service;

import com.yellow.common.entity.response.ResponseResult;
import com.yellow.common.entity.response.QueryResponseResult;
import com.yellow.common.entity.response.ObjectResponseResult;

import org.springframework.security.access.prepost.PreAuthorize;

import javax.validation.Valid;
import javax.annotation.Resource;

/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @since ${datetime}
 */
@Api(tags = "${comments}")
@RestController
@RequestMapping("/${moduleName}/${pathName}")
public class ${className}Controller {

    @Resource
    private ${className}Service ${classname}Service;

    @ApiOperation("分页查询列表数据")
    @GetMapping("/page/list/{page}/{size}")
    @PreAuthorize("hasAuthority('${moduleName}:${pathName}:list')")
    public QueryResponseResult<${className}Ext> pageList(@PathVariable("page") int page, @PathVariable("size") int size, Query${className}Request request){
        return ${classname}Service.pageList(page, size, request);
    }

    @ApiOperation("信息")
    @GetMapping("{${pk.attrname}}")
    @PreAuthorize("hasAuthority('${moduleName}:${pathName}:info')")
    public ObjectResponseResult<${className}Ext> info(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}){
        return ObjectResponseResult.success(${classname}Service.findById(${pk.attrname}));
    }

    @ApiOperation("保存")
    @PostMapping
    @PreAuthorize("hasAuthority('${moduleName}:${pathName}:save')")
    public ResponseResult save(@Valid @RequestBody ${className}Ext request){
		${classname}Service.save(request);

        return ResponseResult.success();
    }

    @ApiOperation("修改")
    @PutMapping("{${pk.attrname}}")
    @PreAuthorize("hasAuthority('${moduleName}:${pathName}:update')")
    public ResponseResult update(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}, @Valid @RequestBody ${className}Ext request){
		${classname}Service.update(${pk.attrname}, request);

        return ResponseResult.success();
    }

    @ApiOperation("删除")
    @DeleteMapping
    @PreAuthorize("hasAuthority('${moduleName}:${pathName}:delete')")
    public ResponseResult delete(@RequestBody ${pk.attrType}[] ${pk.attrname}s){
		${classname}Service.deleteBatch(Arrays.asList(${pk.attrname}s));

        return ResponseResult.success();
    }

}
